{"version":3,"sources":["components/ProgressBar/ProgressBar.js","components/TextInput/TextInput.js","components/Label/Label.js","hooks/useToggleBool.js","components/PasswordInput/PasswordInput.js","components/EyeIcon/EyeIcon.js","../config/componentData.js","docs/examples/EyeIcon/ExampleEyeIcon.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","docs/examples sync /^/.//.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","reportWebVitals.js","index.js"],"names":["ProgressBar","percent","width","height","className","style","parseInt","backgroundColor","TextInput","htmlId","name","label","type","required","onChange","placeholder","value","error","children","props","Label","htmlFor","id","useToggleBool","initial","useState","state","setState","PasswordInput","maxLength","showPasswordInitially","quality","showPassword","toggleShowPassword","onClick","event","preventDefault","EyeIcon","length","xmlns","viewBox","transform","fill","d","cx","cy","r","module","exports","ExampleEyeIcon","ExampleOptional","ExampleRequired","ExampleAllFeatures","password","setPassword","target","minLength","Example100Percent","Example10Percent","Example70Percent","HelloWorld","message","defaultProps","ExampleHelloWorld","RegistrationForm","minPasswordLength","onSubmit","confirmationMessage","email","user","setUser","errors","setErrors","submitted","setSubmitted","handleChange","prevErrors","console","log","validate","ExampleRegistrationForm","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","Navigation","components","href","CodeExample","useEffect","Prism","highlightAll","Example","toggleCode","prevState","showCode","this","example","description","ExampleComponent","require","componentName","default","React","Component","Props","key","defaultValue","ComponentPage","component","examples","Docs","getCurrentHash","window","location","hash","substr","route","setRoute","addEventListener","componentData","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAuCeA,G,KAnCK,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAAwB,IAAjBC,cAAiB,MAAR,EAAQ,EAUtD,OACE,qBAAKC,UAAU,cAAcC,MAAO,CAAEH,SAAtC,SACE,qBACEE,UAAU,mBACVC,MAAO,CACLH,MAPNI,SAASJ,GAASD,EAAU,KAAM,IAQ5BE,SACAI,gBAfU,MAAZN,EAAwB,QAErBA,EAAU,GAAK,aAAe,c,6GC2D1BO,EA9DG,SAAC,GAAD,IAChBC,EADgB,EAChBA,OACAC,EAFgB,EAEhBA,KACAC,EAHgB,EAGhBA,MAHgB,IAIhBC,YAJgB,MAIT,OAJS,MAKhBC,gBALgB,SAMhBC,EANgB,EAMhBA,SACAC,EAPgB,EAOhBA,YACAC,EARgB,EAQhBA,MACAC,EATgB,EAShBA,MACAC,EAVgB,EAUhBA,SACGC,EAXa,sHAahB,sBAAKf,UAAU,YAAf,UACE,cAACgB,EAAA,EAAD,CAAOC,QAASZ,EAAQE,MAAOA,EAAOE,SAAUA,IAChD,mCACET,UAAS,0BAAqBa,GAAS,eACvCK,GAAIb,EACJG,KAAMA,EACNF,KAAMA,EACNK,YAAaA,EACbC,MAAOA,EACPF,SAAUA,GACNK,IAELD,EACAD,GAAS,qBAAKb,UAAU,mBAAf,SAAmCa,S,gFCVlCG,G,KAjBD,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASV,EAAZ,EAAYA,MAAZ,IAAmBE,gBAAnB,gBACZ,wBAAOT,UAAU,QAAQiB,QAASA,EAAlC,UACGV,EADH,IACWE,GAAY,sBAAMT,UAAU,kBAAhB,sB,8GCIVmB,EARO,SAAAC,GAAY,IAAD,EACLC,mBAASD,GADJ,mBACxBE,EADwB,KACjBC,EADiB,KAK/B,MAAO,CAACD,EAFW,kBAAMC,GAAUD,M,qBCiFtBE,EA9EO,SAAC,GAWhB,IAVLnB,EAUI,EAVJA,OACAO,EASI,EATJA,MASI,IARJL,aAQI,MARI,WAQJ,EAPJM,EAOI,EAPJA,MACAH,EAMI,EANJA,SACAC,EAKI,EALJA,YAKI,IAJJc,iBAII,MAJQ,GAIR,MAHJC,6BAGI,SAFJC,EAEI,EAFJA,QACGZ,EACC,2HACuCI,EACzCO,GAFE,mBACGE,EADH,KACiBC,EADjB,KAUJ,OACE,eAACzB,EAAA,EAAD,yBACEC,OAAQA,EACRE,MAAOA,EACPI,YAAaA,EACbH,KAAMoB,EAAe,OAAS,WAC9BlB,SAAUA,EACVE,MAAOA,EACPa,UAAWA,EACXZ,MAAOA,EACPJ,UAAQ,GACJM,GAVN,cAaI,wBAAQf,UAAU,wBAAwB8B,QAnB3B,SAAAC,GACnBF,IACIE,GAAOA,EAAMC,kBAiBb,SACE,cAACC,EAAA,EAAD,MAGHrB,EAAMsB,OAAS,GAAKP,GACnB,cAAC/B,EAAA,EAAD,CAAaC,QAAS8B,EAAS7B,MAAO,Y,0EC/B/BmC,G,KAdC,kBAEd,aADA,CACA,OACEnC,MAAM,KACNC,OAAO,KACPoC,MAAM,6BACNC,QAAQ,YAJV,SAME,oBAAGC,UAAU,gCAAgCC,KAAK,UAAlD,UACE,sBAAMC,EAAE,6UACR,wBAAQC,GAAG,SAASC,GAAG,SAASC,EAAE,kB,eCbxCC,EAAOC,QAAU,CAAC,CAAC,KAAO,UAAU,YAAc,eAAe,KAAO,yyBAAwzB,SAAW,CAAC,CAAC,KAAO,iBAAiB,YAAc,oBAAoB,KAAO,kLAAkL,CAAC,KAAO,aAAa,YAAc,4DAA4D,MAAQ,CAAC,QAAU,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,qBAAqB,aAAe,CAAC,MAAQ,UAAU,UAAW,KAAS,KAAO,0YAA0Y,SAAW,CAAC,CAAC,KAAO,oBAAoB,YAAc,mCAAmC,KAAO,mPAAmP,CAAC,KAAO,QAAQ,YAAc,+DAA+D,MAAQ,CAAC,QAAU,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,gCAAgC,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,cAAc,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAM,YAAc,uCAAuC,aAAe,CAAC,MAAQ,QAAQ,UAAW,KAAS,KAAO,gmBAAgmB,SAAW,CAAC,CAAC,KAAO,kBAAkB,YAAc,iBAAiB,KAAO,+OAA+O,CAAC,KAAO,kBAAkB,YAAc,iBAAiB,KAAO,0PAA0P,CAAC,KAAO,gBAAgB,YAAc,gFAAgF,MAAQ,CAAC,OAAS,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,yFAAyF,KAAO,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,wGAAwG,MAAQ,CAAC,KAAO,CAAC,KAAO,OAAO,UAAW,EAAM,YAAc,kBAAkB,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,cAAc,aAAe,CAAC,MAAQ,aAAa,UAAW,IAAQ,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAK,YAAc,qDAAqD,UAAY,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,+BAA+B,aAAe,CAAC,MAAQ,KAAK,UAAW,IAAQ,YAAc,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,sDAAsD,sBAAwB,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAM,YAAc,mFAAmF,aAAe,CAAC,MAAQ,QAAQ,UAAW,IAAQ,QAAU,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,wFAAwF,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,gCAAgC,KAAO,kzEAAkzE,SAAW,CAAC,CAAC,KAAO,qBAAqB,YAAc,GAAG,KAAO,svBAAsvB,CAAC,KAAO,cAAc,YAAc,iEAAiE,MAAQ,CAAC,QAAU,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,iCAAiC,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,aAAa,OAAS,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,aAAa,aAAe,CAAC,MAAQ,IAAI,UAAW,KAAS,KAAO,28BAA28B,SAAW,CAAC,CAAC,KAAO,oBAAoB,YAAc,gCAAgC,KAAO,sQAAsQ,CAAC,KAAO,mBAAmB,YAAc,eAAe,KAAO,sOAAsO,CAAC,KAAO,mBAAmB,YAAc,eAAe,KAAO,wOAAwO,CAAC,KAAO,mBAAmB,YAAc,6CAA6C,MAAQ,CAAC,oBAAsB,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,+CAA+C,aAAe,CAAC,MAAQ,4BAA4B,UAAW,IAAQ,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAK,YAAc,iCAAiC,kBAAoB,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,0BAA0B,aAAe,CAAC,MAAQ,IAAI,UAAW,KAAS,KAAO,61FAA61F,SAAW,CAAC,CAAC,KAAO,0BAA0B,YAAc,oEAAoE,KAAO,sWAAsW,CAAC,KAAO,YAAY,YAAc,gIAAgI,MAAQ,CAAC,OAAS,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,yFAAyF,KAAO,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,wGAAwG,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,eAAe,KAAO,CAAC,KAAO,CAAC,KAAO,OAAO,MAAQ,CAAC,CAAC,MAAQ,SAAS,UAAW,GAAO,CAAC,MAAQ,WAAW,UAAW,GAAO,CAAC,MAAQ,aAAa,UAAW,KAAS,UAAW,EAAM,YAAc,aAAa,aAAe,CAAC,MAAQ,SAAS,UAAW,IAAQ,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAM,YAAc,0CAA0C,aAAe,CAAC,MAAQ,QAAQ,UAAW,IAAQ,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAK,YAAc,8BAA8B,YAAc,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,qCAAqC,MAAQ,CAAC,KAAO,CAAC,KAAO,OAAO,UAAW,EAAM,YAAc,SAAS,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,uCAAuC,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAM,YAAc,iDAAiD,KAAO,kvDAAkvD,SAAW,CAAC,CAAC,KAAO,eAAe,YAAc,8BAA8B,KAAO,6YAAiZ,CAAC,KAAO,kBAAkB,YAAc,mBAAmB,KAAO,gV,8DCKzqkBC,UADQ,kBAAM,cAAC,IAAD,M,6DCIdC,UAJS,WACtB,OAAO,cAAC,IAAD,CAAO7B,QAAQ,iBAAiBV,MAAM,qB,6DCGhCwC,UAJS,WACtB,OAAO,cAAC,IAAD,CAAO9B,QAAQ,iBAAiBV,MAAM,iBAAiBE,UAAQ,M,2ECsBzDuC,UAxBY,SAAAjC,GAAU,IAAD,EACFM,mBAAS,IADP,mBAC3B4B,EAD2B,KACjBC,EADiB,KAOlC,OACE,8BACE,cAAC,IAAD,aACE7C,OAAO,sCACPC,KAAK,WACLI,SAPe,SAAAqB,GAAK,OAAImB,EAAYnB,EAAMoB,OAAOvC,QAQjDA,MAAOqC,EACPG,UAAW,EACXzC,YAAY,iBACZe,uBAAqB,EACrBC,QAdoBsB,EAASf,OAAS,GAAK,IAAwB,GAAlBe,EAASf,QAetDnB,Q,6DCbGsC,UAJW,WACxB,OAAO,cAAC,IAAD,CAAaxD,QAAS,IAAKC,MAAO,IAAKC,OAAQ,O,6DCGzCuD,UAJU,WACvB,OAAO,cAAC,IAAD,CAAazD,QAAS,GAAIC,MAAO,Q,6DCG3ByD,UAJU,WACvB,OAAO,cAAC,IAAD,CAAa1D,QAAS,GAAIC,MAAO,Q,6DCY3BgD,UAbS,WACtB,OACE,cAAC,IAAD,CACEzC,OAAO,mBACPE,MAAM,aACND,KAAK,YACLI,SAAU,aACVD,UAAQ,EACRI,MAAM,6B,6DCGGiC,UAXS,WACtB,OACE,cAAC,IAAD,CACEzC,OAAO,mBACPE,MAAM,aACND,KAAK,YACLI,SAAU,iB,+CCNV8C,G,KAAa,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAO,yCAAYA,OAQrBD,EAAWE,aAAe,CACxBD,QAAS,SAGID,QCVAG,UAJW,kBACxB,cAAC,EAAD,CAAYF,QAAQ,8C,yFCwGPG,EAtGU,SAAC,GAInB,IAYmBX,EAZpB,IAHJY,yBAGI,MAHgB,EAGhB,EAFJC,EAEI,EAFJA,SAEI,IADJC,2BACI,MADkB,0BAClB,IACoB1C,mBAAS,CAAE2C,MAAO,GAAIf,SAAU,KADpD,mBACGgB,EADH,KACSC,EADT,OAEwB7C,mBAAS,IAFjC,mBAEG8C,EAFH,KAEWC,EAFX,OAG8B/C,oBAAS,GAHvC,mBAGGgD,EAHH,KAGcC,EAHd,KAKEC,EAAe,SAAAxC,GAAK,OACxBmC,EAAQ,2BAAKD,GAAN,kBAAalC,EAAMoB,OAAO7C,KAAOyB,EAAMoB,OAAOvC,UAiDvD,OAAOyD,EACL,6BAAKN,IAEL,iCACE,cAAC3D,EAAA,EAAD,CACEC,OAAO,0BACPC,KAAK,QACLI,SAAU6D,EACVhE,MAAM,QACNK,MAAOqD,EAAKD,MACZnD,MAAOsD,EAAOH,MACdvD,UAAQ,IAGV,cAACe,EAAA,EAAD,CACEnB,OAAO,6BACPC,KAAK,WACLM,MAAOqD,EAAKhB,SACZvC,SAAU6D,EACV5C,SA9DkBsB,EA8DOgB,EAAKhB,SA7D7BA,EACDA,EAASf,QAAU2B,EAA0B,IAEtB3D,SACxB+C,EAASf,OAAS2B,EAAqB,IACxC,IALoB,MA8DlBnC,uBAAqB,EACrBD,UAAW,GACXZ,MAAOsD,EAAOlB,WAGhB,wBAAQzC,KAAK,SAASsB,QAnCL,SAAAC,GACnBA,EAAMC,iBAtBS,SAAC,GAAyB,IAAvBgC,EAAsB,EAAtBA,MAAOf,EAAe,EAAfA,SAkBzB,OAjBAmB,EAAU,IAELJ,GACHI,GAAU,SAAAI,GAAU,kCAAUA,GAAV,IAAsBR,MAAO,sBAEnDS,QAAQC,IAAIP,GAERlB,EAASf,OAAS2B,GACpBO,GAAU,SAAAI,GAAU,kCACfA,GADe,IAElBvB,SAAS,6BAAD,OAA+BY,EAA/B,qBAGZY,QAAQC,IAAIP,GAE0B,IAAlBA,EAAOjC,OAQPyC,CAASV,KAE3BH,EAASG,GACTK,GAAa,KA6Bb,0BChFSM,UANiB,WAG9B,OAAO,cAAC,EAAD,CAAkBd,SAFR,SAAAG,GAAI,OAAIQ,QAAQC,IAAIT,Q,gECLvC,IAAIY,EAAM,CACT,2BAA4B,GAC5B,8BAA+B,GAC/B,iCAAkC,GAClC,oCAAqC,GACrC,0BAA2B,GAC3B,6BAA8B,GAC9B,0BAA2B,GAC3B,6BAA8B,GAC9B,qCAAsC,GACtC,wCAAyC,GACzC,kCAAmC,GACnC,qCAAsC,GACtC,iCAAkC,GAClC,oCAAqC,GACrC,iCAAkC,GAClC,oCAAqC,GACrC,6CAA8C,GAC9C,gDAAiD,GACjD,2BAA4B,GAC5B,8BAA+B,GAC/B,8BAA+B,GAC/B,iCAAkC,IAInC,SAASC,EAAeC,GACvB,IAAI7D,EAAK8D,EAAsBD,GAC/B,OAAOE,EAAoB/D,GAE5B,SAAS8D,EAAsBD,GAC9B,IAAIE,EAAoBC,EAAEL,EAAKE,GAAM,CACpC,IAAII,EAAI,IAAIC,MAAM,uBAAyBL,EAAM,KAEjD,MADAI,EAAEE,KAAO,mBACHF,EAEP,OAAON,EAAIE,GAEZD,EAAeQ,KAAO,WACrB,OAAOC,OAAOD,KAAKT,IAEpBC,EAAeU,QAAUR,EACzBrC,EAAOC,QAAUkC,EACjBA,EAAe5D,GAAK,I,uKCxBLuE,EAhBI,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACpB,OACE,oBAAI1F,UAAU,aAAd,SACG0F,EAAWb,KAAI,SAAAvE,GAAI,OAClB,6BACE,mBAAGqF,KAAI,WAAMrF,GAAb,SAAsBA,KADfA,S,iDCYFsF,G,MAdK,SAAC,GAAkB,IAAhB9E,EAAe,EAAfA,SAGrB,OAFA+E,qBAAU,kBAAMC,IAAMC,iBAAgB,IAGpC,8BACE,sBAAM/F,UAAU,sBAAhB,SAAuCc,QCoC9BkF,E,kDAzCb,WAAYjF,GAAQ,IAAD,8BACjB,cAAMA,IAIRkF,WAAa,SAAAlE,GACXA,EAAMC,iBACN,EAAKT,UAAS,SAAA2E,GACZ,MAAO,CAAEC,UAAWD,EAAUC,cANhC,EAAK7E,MAAQ,CAAE6E,UAAU,GAFR,E,qDAYT,IACAA,EAAaC,KAAK9E,MAAlB6E,SADD,EAE6BC,KAAKrF,MAAMsF,QAAvChB,EAFD,EAECA,KAAMiB,EAFP,EAEOA,YAAahG,EAFpB,EAEoBA,KAErBiG,EAAmBC,MAAQ,YAAcJ,KAAKrF,MAAM0F,cAA1B,YAA2CnG,IACxEoG,QACH,OACE,sBAAK1G,UAAU,UAAf,UACGsG,GAAe,6BAAKA,IAErB,cAACC,EAAD,IAEA,4BACE,yBAAQZ,KAAK,GAAG7D,QAASsE,KAAKH,WAA9B,UACGE,EAAW,OAAS,OADvB,aAKDA,GAAY,cAAC,EAAD,UAAcd,W,GA/BbsB,IAAMC,WCkCbC,EAnCD,SAAC,GAAe,IAAb9F,EAAY,EAAZA,MACf,OACE,wBAAOf,UAAU,QAAjB,UACE,gCACE,+BACE,sCACA,6CACA,sCACA,yCACA,+CAGJ,gCACGuF,OAAOD,KAAKvE,GAAO8D,KAAI,SAAAiC,GACtB,OACE,+BACE,6BAAKA,IACL,6BAAK/F,EAAM+F,GAAKR,cAChB,6BAAKvF,EAAM+F,GAAKtG,KAAKF,OACrB,6BACGS,EAAM+F,GAAKC,cAAgBhG,EAAM+F,GAAKC,aAAanG,QAEtD,6BAAKG,EAAM+F,GAAKrG,UAAY,QAPrBqG,YCgBNE,EA7BO,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACf3G,EAAuC2G,EAAvC3G,KAAMgG,EAAiCW,EAAjCX,YAAavF,EAAoBkG,EAApBlG,MAAOmG,EAAaD,EAAbC,SAElC,OACE,sBAAKlH,UAAU,gBAAf,UACE,6BAAKM,IACL,4BAAIgG,IAEJ,yCAAYY,EAAShF,OAAS,GAAK,OAClCgF,EAAShF,OAAS,EACfgF,EAASrC,KAAI,SAAAwB,GAAO,OAClB,cAAC,EAAD,CAEEA,QAASA,EACTI,cAAenG,GAFV+F,EAAQ/F,SAKjB,qBAEJ,uCACCS,EAAQ,cAAC,EAAD,CAAOA,MAAOA,IAAY,uC,iBCK1BoG,EAzBF,WACX,IAAMC,EAAiB,kBAAMC,OAAOC,SAASC,KAAKC,OAAO,IADxC,EAGSnG,mBAAS+F,KAHlB,mBAGVK,EAHU,KAGHC,EAHG,KAKjB7B,qBACE,kBACEwB,OAAOM,iBAAiB,cAAc,kBAAMD,EAASN,UACvD,IAGF3C,QAAQC,IAAI+C,GAEZ,IAAMR,EAAYQ,EACdG,IAAcC,QAAO,SAAAZ,GAAS,OAAIA,EAAU3G,OAASmH,KAAO,GAC5DG,IAAc,GAElB,OACE,gCACE,cAAC,EAAD,CAAYlC,WAAYkC,IAAc/C,KAAI,SAAAoC,GAAS,OAAIA,EAAU3G,UACjE,cAAC,EAAD,CAAe2G,UAAWA,QCbjBa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.87d84329.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Progress bar that scales and changes color based on percentage */\nconst ProgressBar = ({ percent, width, height = 5 }) => {\n  const getColor = () => {\n    if (percent === 100) return 'green';\n\n    return percent > 50 ? 'lightgreen' : 'red';\n  };\n\n  const getWidthAsPercentOfTotalWidth = () =>\n    parseInt(width * (percent / 100), 10);\n\n  return (\n    <div className=\"ProgressBar\" style={{ width }}>\n      <div\n        className=\"ProgressBar__bar\"\n        style={{\n          width: getWidthAsPercentOfTotalWidth(),\n          height,\n          backgroundColor: getColor(),\n        }}\n      />\n    </div>\n  );\n};\n\nProgressBar.propTypes = {\n  /** Percent of progress completed */\n  percent: PropTypes.number.isRequired,\n\n  /** Bar Width */\n  width: PropTypes.number.isRequired,\n\n  /** Bar Height */\n  height: PropTypes.number,\n};\n\nexport default ProgressBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nconst TextInput = ({\n  htmlId,\n  name,\n  label,\n  type = 'text',\n  required = false,\n  onChange,\n  placeholder,\n  value,\n  error,\n  children,\n  ...props\n}) => (\n  <div className=\"TextInput\">\n    <Label htmlFor={htmlId} label={label} required={required} />\n    <input\n      className={`TextInput__input${error && '--has-error'}`}\n      id={htmlId}\n      type={type}\n      name={name}\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      {...props}\n    />\n    {children}\n    {error && <div className=\"TextInput__error\">{error}</div>}\n  </div>\n);\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used*/\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call on change */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node,\n};\n\nexport default TextInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Label with required field display, htmlFor and block styling */\nconst Label = ({ htmlFor, label, required = false }) => (\n  <label className=\"Label\" htmlFor={htmlFor}>\n    {label} {required && <span className=\"Label__required\"> *</span>}\n  </label>\n);\n\nLabel.propTypes = {\n  /** HTML ID for associated input */\n  htmlFor: PropTypes.string.isRequired,\n\n  /** Label text */\n  label: PropTypes.string.isRequired,\n\n  /** Display asterisk after label if true */\n  required: PropTypes.bool,\n};\n\nexport default Label;\n","import { useState } from 'react';\n\nconst useToggleBool = initial => {\n  const [state, setState] = useState(initial);\n\n  const toggleBool = () => setState(!state);\n\n  return [state, toggleBool];\n};\n\nexport default useToggleBool;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useToggleBool from '../../hooks/useToggleBool';\nimport ProgressBar from '../ProgressBar';\nimport EyeIcon from '../EyeIcon';\nimport TextInput from '../TextInput';\n\n/** Password inpuit with integratedlabel, quality tips, and show password toggle. */\nconst PasswordInput = ({\n  htmlId,\n  value,\n  label = 'Password',\n  error,\n  onChange,\n  placeholder,\n  maxLength = 50,\n  showPasswordInitially = false,\n  quality,\n  ...props\n}) => {\n  const [showPassword, toggleShowPassword] = useToggleBool(\n    showPasswordInitially\n  );\n\n  const handleToggle = event => {\n    toggleShowPassword();\n    if (event) event.preventDefault();\n  };\n\n  return (\n    <TextInput\n      htmlId={htmlId}\n      label={label}\n      placeholder={placeholder}\n      type={showPassword ? 'text' : 'password'}\n      onChange={onChange}\n      value={value}\n      maxLength={maxLength}\n      error={error}\n      required\n      {...props}\n    >\n      {\n        <button className=\"PasswordInput__toggle\" onClick={handleToggle}>\n          <EyeIcon />\n        </button>\n      }\n      {value.length > 0 && quality && (\n        <ProgressBar percent={quality} width={130} />\n      )}\n    </TextInput>\n  );\n};\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used*/\n  name: PropTypes.string.isRequired,\n\n  /** Password Value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder to display when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** When set to true, shows the toggle for displaying the currently entered password */\n  showPasswordInitially: PropTypes.bool,\n\n  /** Displaypassword quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string,\n};\n\nexport default PasswordInput;\n","import React from 'react';\n\n/** SVG Eye Icon */\nconst EyeIcon = () => (\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n  <svg\n    width=\"16\"\n    height=\"16\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 22 22\"\n  >\n    <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n      <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n      <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n    </g>\n  </svg>\n);\nexport default EyeIcon;\n","module.exports = [{\"name\":\"EyeIcon\",\"description\":\"SVG Eye Icon\",\"code\":\"import React from 'react';\\n\\n/** SVG Eye Icon */\\nconst EyeIcon = () => (\\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\n  <svg\\n    width=\\\"16\\\"\\n    height=\\\"16\\\"\\n    xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n    viewBox=\\\"0 0 22 22\\\"\\n  >\\n    <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\n      <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\n      <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\n    </g>\\n  </svg>\\n);\\nexport default EyeIcon;\\n\",\"examples\":[{\"name\":\"ExampleEyeIcon\",\"description\":\"EyeIcon in action\",\"code\":\"import React from 'react';\\nimport EyeIcon from 'ps-react/EyeIcon';\\n\\n/** EyeIcon in action */\\nconst ExampleEyeIcon = () => <EyeIcon />;\\nexport default ExampleEyeIcon;\\n\"}]},{\"name\":\"HelloWorld\",\"description\":\"A simple component that says Hello with a custom message.\",\"props\":{\"message\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message to display\",\"defaultValue\":{\"value\":\"'World'\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\n/** A simple component that says Hello with a custom message. */\\nconst HelloWorld = ({ message }) => {\\n  return <div>Hello {message}</div>;\\n};\\n\\nHelloWorld.propTypes = {\\n  /** Message to display */\\n  message: PropTypes.string,\\n};\\n\\nHelloWorld.defaultProps = {\\n  message: 'World',\\n};\\n\\nexport default HelloWorld;\\n\",\"examples\":[{\"name\":\"ExampleHelloWorld\",\"description\":\"Greets people visiting this site\",\"code\":\"import HelloWorld from 'ps-react/HelloWorld/';\\n\\n/** Greets people visiting this site */\\nconst ExampleHelloWorld = () => (\\n  <HelloWorld message=\\\" everyone, thanks for visiting my site!\\\" />\\n);\\n\\nexport default ExampleHelloWorld;\\n\"}]},{\"name\":\"Label\",\"description\":\"Label with required field display, htmlFor and block styling\",\"props\":{\"htmlFor\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"HTML ID for associated input\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Label text\"},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Display asterisk after label if true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\n/** Label with required field display, htmlFor and block styling */\\nconst Label = ({ htmlFor, label, required = false }) => (\\n  <label className=\\\"Label\\\" htmlFor={htmlFor}>\\n    {label} {required && <span className=\\\"Label__required\\\"> *</span>}\\n  </label>\\n);\\n\\nLabel.propTypes = {\\n  /** HTML ID for associated input */\\n  htmlFor: PropTypes.string.isRequired,\\n\\n  /** Label text */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Display asterisk after label if true */\\n  required: PropTypes.bool,\\n};\\n\\nexport default Label;\\n\",\"examples\":[{\"name\":\"ExampleOptional\",\"description\":\"Optional label\",\"code\":\"import React from 'react';\\nimport Label from 'ps-react/Label';\\n\\n/** Optional label */\\nconst ExampleOptional = () => {\\n  return <Label htmlFor=\\\"address-line-2\\\" label=\\\"Address Line 2\\\" />;\\n};\\n\\nexport default ExampleOptional;\\n\"},{\"name\":\"ExampleRequired\",\"description\":\"Required label\",\"code\":\"import React from 'react';\\nimport Label from 'ps-react/Label';\\n\\n/** Required label */\\nconst ExampleRequired = () => {\\n  return <Label htmlFor=\\\"address-line-1\\\" label=\\\"Address Line 1\\\" required />;\\n};\\n\\nexport default ExampleRequired;\\n\"}]},{\"name\":\"PasswordInput\",\"description\":\"Password inpuit with integratedlabel, quality tips, and show password toggle.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Password Value\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Input label\",\"defaultValue\":{\"value\":\"'Password'\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function called when password input value changes\"},\"maxLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Max password length accepted\",\"defaultValue\":{\"value\":\"50\",\"computed\":false}},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when no password is entered\"},\"showPasswordInitially\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"When set to true, shows the toggle for displaying the currently entered password\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"quality\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Displaypassword quality visually via ProgressBar, accepts a number between 0 and 100\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Validation error to display\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport useToggleBool from '../../hooks/useToggleBool';\\nimport ProgressBar from '../ProgressBar';\\nimport EyeIcon from '../EyeIcon';\\nimport TextInput from '../TextInput';\\n\\n/** Password inpuit with integratedlabel, quality tips, and show password toggle. */\\nconst PasswordInput = ({\\n  htmlId,\\n  value,\\n  label = 'Password',\\n  error,\\n  onChange,\\n  placeholder,\\n  maxLength = 50,\\n  showPasswordInitially = false,\\n  quality,\\n  ...props\\n}) => {\\n  const [showPassword, toggleShowPassword] = useToggleBool(\\n    showPasswordInitially\\n  );\\n\\n  const handleToggle = event => {\\n    toggleShowPassword();\\n    if (event) event.preventDefault();\\n  };\\n\\n  return (\\n    <TextInput\\n      htmlId={htmlId}\\n      label={label}\\n      placeholder={placeholder}\\n      type={showPassword ? 'text' : 'password'}\\n      onChange={onChange}\\n      value={value}\\n      maxLength={maxLength}\\n      error={error}\\n      required\\n      {...props}\\n    >\\n      {\\n        <button className=\\\"PasswordInput__toggle\\\" onClick={handleToggle}>\\n          <EyeIcon />\\n        </button>\\n      }\\n      {value.length > 0 && quality && (\\n        <ProgressBar percent={quality} width={130} />\\n      )}\\n    </TextInput>\\n  );\\n};\\n\\nPasswordInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used*/\\n  name: PropTypes.string.isRequired,\\n\\n  /** Password Value */\\n  value: PropTypes.any,\\n\\n  /** Input label */\\n  label: PropTypes.string,\\n\\n  /** Function called when password input value changes */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Max password length accepted */\\n  maxLength: PropTypes.number,\\n\\n  /** Placeholder to display when no password is entered */\\n  placeholder: PropTypes.string,\\n\\n  /** When set to true, shows the toggle for displaying the currently entered password */\\n  showPasswordInitially: PropTypes.bool,\\n\\n  /** Displaypassword quality visually via ProgressBar, accepts a number between 0 and 100 */\\n  quality: PropTypes.number,\\n\\n  /** Validation error to display */\\n  error: PropTypes.string,\\n};\\n\\nexport default PasswordInput;\\n\",\"examples\":[{\"name\":\"ExampleAllFeatures\",\"description\":\"\",\"code\":\"import React, { useState } from 'react';\\nimport PasswordInput from '../../../components/PasswordInput';\\n\\nconst ExampleAllFeatures = props => {\\n  const [password, setPassword] = useState('');\\n\\n  const getQuality = () => (password.length > 10 ? 100 : password.length * 10);\\n\\n  const handleChange = event => setPassword(event.target.value);\\n\\n  return (\\n    <div>\\n      <PasswordInput\\n        htmlId=\\\"password-input-example-all-features\\\"\\n        name=\\\"password\\\"\\n        onChange={handleChange}\\n        value={password}\\n        minLength={8}\\n        placeholder=\\\"Enter password\\\"\\n        showPasswordInitially\\n        quality={getQuality()}\\n        {...props}\\n      />\\n    </div>\\n  );\\n};\\n\\nexport default ExampleAllFeatures;\\n\"}]},{\"name\":\"ProgressBar\",\"description\":\"Progress bar that scales and changes color based on percentage\",\"props\":{\"percent\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Percent of progress completed\"},\"width\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Bar Width\"},\"height\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Bar Height\",\"defaultValue\":{\"value\":\"5\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\n/** Progress bar that scales and changes color based on percentage */\\nconst ProgressBar = ({ percent, width, height = 5 }) => {\\n  const getColor = () => {\\n    if (percent === 100) return 'green';\\n\\n    return percent > 50 ? 'lightgreen' : 'red';\\n  };\\n\\n  const getWidthAsPercentOfTotalWidth = () =>\\n    parseInt(width * (percent / 100), 10);\\n\\n  return (\\n    <div className=\\\"ProgressBar\\\" style={{ width }}>\\n      <div\\n        className=\\\"ProgressBar__bar\\\"\\n        style={{\\n          width: getWidthAsPercentOfTotalWidth(),\\n          height,\\n          backgroundColor: getColor(),\\n        }}\\n      />\\n    </div>\\n  );\\n};\\n\\nProgressBar.propTypes = {\\n  /** Percent of progress completed */\\n  percent: PropTypes.number.isRequired,\\n\\n  /** Bar Width */\\n  width: PropTypes.number.isRequired,\\n\\n  /** Bar Height */\\n  height: PropTypes.number,\\n};\\n\\nexport default ProgressBar;\\n\",\"examples\":[{\"name\":\"Example100Percent\",\"description\":\"100% progress and height 20px\",\"code\":\"import React from 'react';\\nimport ProgressBar from 'ps-react/ProgressBar';\\n\\n/** 100% progress and height 20px */\\nconst Example100Percent = () => {\\n  return <ProgressBar percent={100} width={150} height={20} />;\\n};\\n\\nexport default Example100Percent;\\n\"},{\"name\":\"Example10Percent\",\"description\":\"10% progress\",\"code\":\"import React from 'react';\\nimport ProgressBar from 'ps-react/ProgressBar';\\n\\n/** 10% progress */\\nconst Example10Percent = () => {\\n  return <ProgressBar percent={10} width={150} />;\\n};\\n\\nexport default Example10Percent;\\n\"},{\"name\":\"Example70Percent\",\"description\":\"70% progress\",\"code\":\"import React from 'react';\\nimport ProgressBar from 'ps-react/ProgressBar';\\n\\n/** 70% progress */\\nconst Example70Percent = () => {\\n  return <ProgressBar percent={70} width={150} />;\\n};\\n\\nexport default Example70Percent;\\n\"}]},{\"name\":\"RegistrationForm\",\"description\":\"Registration form with built-in validation\",\"props\":{\"confirmationMessage\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message displayed upon successful submission\",\"defaultValue\":{\"value\":\"'Thanks for registering!'\",\"computed\":false}},\"onSubmit\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Called when form is submitted\"},\"minPasswordLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Minimum password length\",\"defaultValue\":{\"value\":\"8\",\"computed\":false}}},\"code\":\"import React, { useState } from 'react';\\nimport PropTypes from 'prop-types';\\nimport PasswordInput from '../PasswordInput';\\nimport TextInput from '../TextInput';\\n\\n/** Registration form with built-in validation */\\nconst RegistrationForm = ({\\n  minPasswordLength = 8,\\n  onSubmit,\\n  confirmationMessage = 'Thanks for registering!',\\n}) => {\\n  const [user, setUser] = useState({ email: '', password: '' });\\n  const [errors, setErrors] = useState({});\\n  const [submitted, setSubmitted] = useState(false);\\n\\n  const handleChange = event =>\\n    setUser({ ...user, [event.target.name]: event.target.value });\\n\\n  /** Returns a number from 0 to 100 that represents password quality.\\n   * For simplicity, just returning % of min length entered.\\n   * Could enhance with checks for number, special char, unique characters, etc.\\n   */\\n  const passwordQuality = password => {\\n    if (!password) return null;\\n    if (password.length >= minPasswordLength) return 100;\\n\\n    const percentOfMinLength = parseInt(\\n      (password.length / minPasswordLength) * 100,\\n      10\\n    );\\n\\n    return percentOfMinLength;\\n  };\\n\\n  const validate = ({ email, password }) => {\\n    setErrors({});\\n\\n    if (!email) {\\n      setErrors(prevErrors => ({ ...prevErrors, email: 'Email required' }));\\n    }\\n    console.log(errors);\\n\\n    if (password.length < minPasswordLength) {\\n      setErrors(prevErrors => ({\\n        ...prevErrors,\\n        password: `Password must be at least ${minPasswordLength} characters.`,\\n      }));\\n    }\\n    console.log(errors);\\n\\n    const isValidForm = errors.length === 0;\\n\\n    return isValidForm;\\n  };\\n\\n  const handleSubmit = event => {\\n    event.preventDefault();\\n\\n    const isValidForm = validate(user);\\n    if (isValidForm) {\\n      onSubmit(user);\\n      setSubmitted(true);\\n    }\\n  };\\n\\n  return submitted ? (\\n    <h2>{confirmationMessage}</h2>\\n  ) : (\\n    <form>\\n      <TextInput\\n        htmlId=\\\"RegistrationForm__email\\\"\\n        name=\\\"email\\\"\\n        onChange={handleChange}\\n        label=\\\"Email\\\"\\n        value={user.email}\\n        error={errors.email}\\n        required\\n      />\\n\\n      <PasswordInput\\n        htmlId=\\\"RegistrationForm__password\\\"\\n        name=\\\"password\\\"\\n        value={user.password}\\n        onChange={handleChange}\\n        quality={passwordQuality(user.password)}\\n        showPasswordInitially\\n        maxLength={50}\\n        error={errors.password}\\n      />\\n\\n      <button type=\\\"submit\\\" onClick={handleSubmit}>\\n        Register\\n      </button>\\n    </form>\\n  );\\n};\\n\\nRegistrationForm.propTypes = {\\n  /** Message displayed upon successful submission */\\n  confirmationMessage: PropTypes.string,\\n\\n  /** Called when form is submitted */\\n  onSubmit: PropTypes.func.isRequired,\\n\\n  /** Minimum password length */\\n  minPasswordLength: PropTypes.number,\\n};\\n\\nexport default RegistrationForm;\\n\",\"examples\":[{\"name\":\"ExampleRegistrationForm\",\"description\":\"Registration form with default options, that logs user to console\",\"code\":\"import React from 'react';\\nimport RegistrationForm from 'ps-react/RegistrationForm';\\n\\n/** Registration form with default options, that logs user to console */\\nconst ExampleRegistrationForm = () => {\\n  const onSubmit = user => console.log(user);\\n\\n  return <RegistrationForm onSubmit={onSubmit} />;\\n};\\n\\nexport default ExampleRegistrationForm;\\n\"}]},{\"name\":\"TextInput\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"'text'\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call on change\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nconst TextInput = ({\\n  htmlId,\\n  name,\\n  label,\\n  type = 'text',\\n  required = false,\\n  onChange,\\n  placeholder,\\n  value,\\n  error,\\n  children,\\n  ...props\\n}) => (\\n  <div className=\\\"TextInput\\\">\\n    <Label htmlFor={htmlId} label={label} required={required} />\\n    <input\\n      className={`TextInput__input${error && '--has-error'}`}\\n      id={htmlId}\\n      type={type}\\n      name={name}\\n      placeholder={placeholder}\\n      value={value}\\n      onChange={onChange}\\n      {...props}\\n    />\\n    {children}\\n    {error && <div className=\\\"TextInput__error\\\">{error}</div>}\\n  </div>\\n);\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used*/\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call on change */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node,\\n};\\n\\nexport default TextInput;\\n\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React from 'react';\\nimport TextInput from 'ps-react/TextInput';\\n\\n/** Required TextBox with error */\\nconst ExampleOptional = () => {\\n  return (\\n    <TextInput\\n      htmlId=\\\"example-optional\\\"\\n      label=\\\"First Name\\\"\\n      name=\\\"firstname\\\"\\n      onChange={() => {}}\\n      required\\n      error=\\\"First name is required\\\"\\n    />\\n  );\\n};\\n\\nexport default ExampleOptional;\\n\"},{\"name\":\"ExampleOptional\",\"description\":\"Optional TextBox\",\"code\":\"import React from 'react';\\nimport TextInput from 'ps-react/TextInput';\\n\\n/** Optional TextBox */\\nconst ExampleOptional = () => {\\n  return (\\n    <TextInput\\n      htmlId=\\\"example-optional\\\"\\n      label=\\\"First Name\\\"\\n      name=\\\"firstname\\\"\\n      onChange={() => {}}\\n    />\\n  );\\n};\\n\\nexport default ExampleOptional;\\n\"}]}]","import React from 'react';\nimport EyeIcon from 'ps-react/EyeIcon';\n\n/** EyeIcon in action */\nconst ExampleEyeIcon = () => <EyeIcon />;\nexport default ExampleEyeIcon;\n","import React from 'react';\nimport Label from 'ps-react/Label';\n\n/** Optional label */\nconst ExampleOptional = () => {\n  return <Label htmlFor=\"address-line-2\" label=\"Address Line 2\" />;\n};\n\nexport default ExampleOptional;\n","import React from 'react';\nimport Label from 'ps-react/Label';\n\n/** Required label */\nconst ExampleRequired = () => {\n  return <Label htmlFor=\"address-line-1\" label=\"Address Line 1\" required />;\n};\n\nexport default ExampleRequired;\n","import React, { useState } from 'react';\nimport PasswordInput from '../../../components/PasswordInput';\n\nconst ExampleAllFeatures = props => {\n  const [password, setPassword] = useState('');\n\n  const getQuality = () => (password.length > 10 ? 100 : password.length * 10);\n\n  const handleChange = event => setPassword(event.target.value);\n\n  return (\n    <div>\n      <PasswordInput\n        htmlId=\"password-input-example-all-features\"\n        name=\"password\"\n        onChange={handleChange}\n        value={password}\n        minLength={8}\n        placeholder=\"Enter password\"\n        showPasswordInitially\n        quality={getQuality()}\n        {...props}\n      />\n    </div>\n  );\n};\n\nexport default ExampleAllFeatures;\n","import React from 'react';\nimport ProgressBar from 'ps-react/ProgressBar';\n\n/** 100% progress and height 20px */\nconst Example100Percent = () => {\n  return <ProgressBar percent={100} width={150} height={20} />;\n};\n\nexport default Example100Percent;\n","import React from 'react';\nimport ProgressBar from 'ps-react/ProgressBar';\n\n/** 10% progress */\nconst Example10Percent = () => {\n  return <ProgressBar percent={10} width={150} />;\n};\n\nexport default Example10Percent;\n","import React from 'react';\nimport ProgressBar from 'ps-react/ProgressBar';\n\n/** 70% progress */\nconst Example70Percent = () => {\n  return <ProgressBar percent={70} width={150} />;\n};\n\nexport default Example70Percent;\n","import React from 'react';\nimport TextInput from 'ps-react/TextInput';\n\n/** Required TextBox with error */\nconst ExampleOptional = () => {\n  return (\n    <TextInput\n      htmlId=\"example-optional\"\n      label=\"First Name\"\n      name=\"firstname\"\n      onChange={() => {}}\n      required\n      error=\"First name is required\"\n    />\n  );\n};\n\nexport default ExampleOptional;\n","import React from 'react';\nimport TextInput from 'ps-react/TextInput';\n\n/** Optional TextBox */\nconst ExampleOptional = () => {\n  return (\n    <TextInput\n      htmlId=\"example-optional\"\n      label=\"First Name\"\n      name=\"firstname\"\n      onChange={() => {}}\n    />\n  );\n};\n\nexport default ExampleOptional;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** A simple component that says Hello with a custom message. */\nconst HelloWorld = ({ message }) => {\n  return <div>Hello {message}</div>;\n};\n\nHelloWorld.propTypes = {\n  /** Message to display */\n  message: PropTypes.string,\n};\n\nHelloWorld.defaultProps = {\n  message: 'World',\n};\n\nexport default HelloWorld;\n","import HelloWorld from 'ps-react/HelloWorld/';\n\n/** Greets people visiting this site */\nconst ExampleHelloWorld = () => (\n  <HelloWorld message=\" everyone, thanks for visiting my site!\" />\n);\n\nexport default ExampleHelloWorld;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PasswordInput from '../PasswordInput';\nimport TextInput from '../TextInput';\n\n/** Registration form with built-in validation */\nconst RegistrationForm = ({\n  minPasswordLength = 8,\n  onSubmit,\n  confirmationMessage = 'Thanks for registering!',\n}) => {\n  const [user, setUser] = useState({ email: '', password: '' });\n  const [errors, setErrors] = useState({});\n  const [submitted, setSubmitted] = useState(false);\n\n  const handleChange = event =>\n    setUser({ ...user, [event.target.name]: event.target.value });\n\n  /** Returns a number from 0 to 100 that represents password quality.\n   * For simplicity, just returning % of min length entered.\n   * Could enhance with checks for number, special char, unique characters, etc.\n   */\n  const passwordQuality = password => {\n    if (!password) return null;\n    if (password.length >= minPasswordLength) return 100;\n\n    const percentOfMinLength = parseInt(\n      (password.length / minPasswordLength) * 100,\n      10\n    );\n\n    return percentOfMinLength;\n  };\n\n  const validate = ({ email, password }) => {\n    setErrors({});\n\n    if (!email) {\n      setErrors(prevErrors => ({ ...prevErrors, email: 'Email required' }));\n    }\n    console.log(errors);\n\n    if (password.length < minPasswordLength) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        password: `Password must be at least ${minPasswordLength} characters.`,\n      }));\n    }\n    console.log(errors);\n\n    const isValidForm = errors.length === 0;\n\n    return isValidForm;\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const isValidForm = validate(user);\n    if (isValidForm) {\n      onSubmit(user);\n      setSubmitted(true);\n    }\n  };\n\n  return submitted ? (\n    <h2>{confirmationMessage}</h2>\n  ) : (\n    <form>\n      <TextInput\n        htmlId=\"RegistrationForm__email\"\n        name=\"email\"\n        onChange={handleChange}\n        label=\"Email\"\n        value={user.email}\n        error={errors.email}\n        required\n      />\n\n      <PasswordInput\n        htmlId=\"RegistrationForm__password\"\n        name=\"password\"\n        value={user.password}\n        onChange={handleChange}\n        quality={passwordQuality(user.password)}\n        showPasswordInitially\n        maxLength={50}\n        error={errors.password}\n      />\n\n      <button type=\"submit\" onClick={handleSubmit}>\n        Register\n      </button>\n    </form>\n  );\n};\n\nRegistrationForm.propTypes = {\n  /** Message displayed upon successful submission */\n  confirmationMessage: PropTypes.string,\n\n  /** Called when form is submitted */\n  onSubmit: PropTypes.func.isRequired,\n\n  /** Minimum password length */\n  minPasswordLength: PropTypes.number,\n};\n\nexport default RegistrationForm;\n","import React from 'react';\nimport RegistrationForm from 'ps-react/RegistrationForm';\n\n/** Registration form with default options, that logs user to console */\nconst ExampleRegistrationForm = () => {\n  const onSubmit = user => console.log(user);\n\n  return <RegistrationForm onSubmit={onSubmit} />;\n};\n\nexport default ExampleRegistrationForm;\n","var map = {\n\t\"./EyeIcon/ExampleEyeIcon\": 13,\n\t\"./EyeIcon/ExampleEyeIcon.js\": 13,\n\t\"./HelloWorld/ExampleHelloWorld\": 22,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 22,\n\t\"./Label/ExampleOptional\": 14,\n\t\"./Label/ExampleOptional.js\": 14,\n\t\"./Label/ExampleRequired\": 15,\n\t\"./Label/ExampleRequired.js\": 15,\n\t\"./PasswordInput/ExampleAllFeatures\": 16,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 16,\n\t\"./ProgressBar/Example100Percent\": 17,\n\t\"./ProgressBar/Example100Percent.js\": 17,\n\t\"./ProgressBar/Example10Percent\": 18,\n\t\"./ProgressBar/Example10Percent.js\": 18,\n\t\"./ProgressBar/Example70Percent\": 19,\n\t\"./ProgressBar/Example70Percent.js\": 19,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 23,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 23,\n\t\"./TextInput/ExampleError\": 20,\n\t\"./TextInput/ExampleError.js\": 20,\n\t\"./TextInput/ExampleOptional\": 21,\n\t\"./TextInput/ExampleOptional.js\": 21\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 38;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Navigation = ({ components }) => {\n  return (\n    <ul className=\"navigation\">\n      {components.map(name => (\n        <li key={name}>\n          <a href={`#${name}`}>{name}</a>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nNavigation.propTypes = {\n  components: PropTypes.array.isRequired,\n};\n\nexport default Navigation;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Prism from 'prismjs';\nimport './themes/prism-solarizedlight.css';\n\nconst CodeExample = ({ children }) => {\n  useEffect(() => Prism.highlightAll(), []);\n\n  return (\n    <pre>\n      <code className=\"language-javascript\">{children}</code>\n    </pre>\n  );\n};\n\nCodeExample.propTypes = {\n  children: PropTypes.string.isRequired,\n};\n\nexport default CodeExample;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CodeExample from './CodeExample';\n\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { showCode: false };\n  }\n\n  toggleCode = event => {\n    event.preventDefault();\n    this.setState(prevState => {\n      return { showCode: !prevState.showCode };\n    });\n  };\n\n  render() {\n    const { showCode } = this.state;\n    const { code, description, name } = this.props.example;\n    // Must use CommonJS require to dynamically require because ES Modules must be statically analyzable.\n    const ExampleComponent = require(`./examples/${this.props.componentName}/${name}`)\n      .default;\n    return (\n      <div className=\"example\">\n        {description && <h4>{description}</h4>}\n\n        <ExampleComponent />\n\n        <p>\n          <button href=\"\" onClick={this.toggleCode}>\n            {showCode ? 'Hide' : 'Show'} Code\n          </button>\n        </p>\n\n        {showCode && <CodeExample>{code}</CodeExample>}\n      </div>\n    );\n  }\n}\n\nExample.propTypes = {\n  example: PropTypes.object.isRequired,\n  componentName: PropTypes.string.isRequired,\n};\n\nexport default Example;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Props = ({ props }) => {\n  return (\n    <table className=\"props\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Type</th>\n          <th>Default</th>\n          <th>Required</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Object.keys(props).map(key => {\n          return (\n            <tr key={key}>\n              <td>{key}</td>\n              <td>{props[key].description}</td>\n              <td>{props[key].type.name}</td>\n              <td>\n                {props[key].defaultValue && props[key].defaultValue.value}\n              </td>\n              <td>{props[key].required && 'X'}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nProps.propTypes = {\n  props: PropTypes.object.isRequired,\n};\n\nexport default Props;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Example from './Example';\nimport Props from './Props';\n\nconst ComponentPage = ({ component }) => {\n  const { name, description, props, examples } = component;\n\n  return (\n    <div className=\"componentpage\">\n      <h2>{name}</h2>\n      <p>{description}</p>\n\n      <h3>Example{examples.length > 1 && 's'}</h3>\n      {examples.length > 0\n        ? examples.map(example => (\n            <Example\n              key={example.name}\n              example={example}\n              componentName={name}\n            />\n          ))\n        : 'No examples exist.'}\n\n      <h3>Props</h3>\n      {props ? <Props props={props} /> : 'This component accepts no props.'}\n    </div>\n  );\n};\n\nComponentPage.propTypes = {\n  component: PropTypes.object.isRequired,\n};\n\nexport default ComponentPage;\n","import React, { useState, useEffect } from 'react';\nimport Navigation from './Navigation';\nimport ComponentPage from './ComponentPage';\nimport componentData from '../../config/componentData';\n\nconst Docs = () => {\n  const getCurrentHash = () => window.location.hash.substr(1);\n\n  const [route, setRoute] = useState(getCurrentHash());\n\n  useEffect(\n    () =>\n      window.addEventListener('hashchange', () => setRoute(getCurrentHash())),\n    []\n  );\n\n  console.log(route);\n\n  const component = route\n    ? componentData.filter(component => component.name === route)[0]\n    : componentData[0];\n\n  return (\n    <div>\n      <Navigation components={componentData.map(component => component.name)} />\n      <ComponentPage component={component} />\n    </div>\n  );\n};\n\nexport default Docs;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Docs from './docs/Docs';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Docs />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}